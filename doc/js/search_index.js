var search_data = {"index":{"searchIndex":["game","player","question","turn","announce_winner()","check_answer()","check_game_over()","execute_turn()","generate_question()","is_alive?()","lose_life()","new()","new()","new()","new()","start_game()","switch_turns()"],"longSearchIndex":["game","player","question","turn","game#announce_winner()","question#check_answer()","game#check_game_over()","turn#execute_turn()","question#generate_question()","player#is_alive?()","player#lose_life()","game::new()","player::new()","question::new()","turn::new()","game#start_game()","game#switch_turns()"],"info":[["Game","","Game.html","","<p>The Game class manages the flow and state of a two-player math game.\n"],["Player","","Player.html","","<p>Player class represents a game player with a name and a number of lives.\n"],["Question","","Question.html","","<p>Question class represents a simple arithmetic question generator.\n"],["Turn","","Turn.html","","<p>Turn class manages a turn in a game between two players.\n"],["announce_winner","Game","Game.html#method-i-announce_winner","()","<p>Announces the winner of the game and prints a game over message.\n"],["check_answer","Question","Question.html#method-i-check_answer","(answer)","<p>Checks if the provided answer matches the correct answer.\n<p>@param answer [Integer] the answer provided …\n"],["check_game_over","Game","Game.html#method-i-check_game_over","()","<p>Checks if the game is over by verifying the players’ alive status.\n<p>If either player is not alive, …\n"],["execute_turn","Turn","Turn.html#method-i-execute_turn","()","<p>Executes the turn by asking a question to the current player, checking the answer, and updating player …\n"],["generate_question","Question","Question.html#method-i-generate_question","()","<p>Generates a textual representation of the arithmetic question.\n<p>@return [String] the generated question …\n"],["is_alive?","Player","Player.html#method-i-is_alive-3F","()","<p>Checks if the player is still alive.\n<p>@return [Boolean] true if the player has more than 0 lives, false …\n"],["lose_life","Player","Player.html#method-i-lose_life","()","<p>Decreases the player’s lives by 1.\n<p>@return [void]\n"],["new","Game","Game.html#method-c-new","(player1_name, player2_name)","<p>Initializes the game with two players.\n<p>@param player1_name [String] the name of the first player @param …\n"],["new","Player","Player.html#method-c-new","(name)","<p>Initializes a new Player instance with a given name and sets the initial number of lives to 3.\n<p>@param …\n"],["new","Question","Question.html#method-c-new","()","<p>Initializes a new Question instance with two random numbers between 1 and 20 and computes the correct …\n"],["new","Turn","Turn.html#method-c-new","(current_player, player1, player2)","<p>Initializes a new Turn instance with the current player and two opponent players.\n<p>@param current_player …\n"],["start_game","Game","Game.html#method-i-start_game","()","<p>Starts the game, managing turns until the game is over.\n"],["switch_turns","Game","Game.html#method-i-switch_turns","()","<p>Switches the current player to the other player.\n"]]}}